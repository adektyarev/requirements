import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Function to fetch stock data from Yahoo Finance
def fetch_stock_data(stock_ticker, start_date, end_date):
    data = yf.download(stock_ticker, start=start_date, end=end_date)
    data['Target'] = data['Close'].shift(-1)  # Predict the next day's closing price
    data.dropna(inplace=True)
    return data

# Function to prepare features and target
def prepare_data(data):
    # Use relevant features
    X = data[['Open', 'High', 'Low', 'Close', 'Volume']]
    y = data['Target']
    # Split into training and testing sets
    return train_test_split(X, y, test_size=0.2, random_state=42)

# Train a stock prediction model
def train_model(X_train, y_train):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model

# Predict future stock prices
def predict_future(model, latest_data):
    return model.predict(latest_data)

# Visualize predictions
def visualize_predictions(actual, predicted, title="Stock Price Predictions"):
    plt.figure(figsize=(10, 6))
    plt.plot(actual, label='Actual Prices', color='blue')
    plt.plot(predicted, label='Predicted Prices', color='orange')
    plt.title(title)
    plt.xlabel("Days")
    plt.ylabel("Stock Price")
    plt.legend()
    plt.grid()
    plt.show()

# Main function to execute the prediction pipeline
def main():
    # Parameters
    stock_ticker = "AAPL"  # Example: Apple Inc.
    start_date = "2015-01-01"
    end_date = "2023-01-01"
    
    # Step 1: Fetch stock data
    stock_data = fetch_stock_data(stock_ticker, start_date, end_date)
    
    # Step 2: Prepare data
    X_train, X_test, y_train, y_test = prepare_data(stock_data)
    
    # Step 3: Train the model
    model = train_model(X_train, y_train)
    
    # Step 4: Predict future prices on the test set
    predictions = predict_future(model, X_test)
    
    # Step 5: Evaluate the model
    mse = mean_squared_error(y_test, predictions)
    print(f"Mean Squared Error: {mse:.2f}")
    
    # Step 6: Visualize predictions vs actual values
    visualize_predictions(y_test.values, predictions, title=f"{stock_ticker} Stock Price Prediction")
    
    # Step 7: Predict future stock price based on latest data
    latest_data = stock_data[['Open', 'High', 'Low', 'Close', 'Volume']].iloc[-1:].values
    future_price = predict_future(model, latest_data)
    print(f"Predicted Future Price for {stock_ticker}: ${future_price[0]:.2f}")

# Run the script
if __name__ == "__main__":
    main()
